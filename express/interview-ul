{"_type":"export","__export_format":4,"__export_date":"2022-05-24T21:06:17.994Z","__export_source":"insomnia.desktop.app:v2022.3.0","resources":[{"_id":"req_0314b101e7524c81bb265cf5761004ab","parentId":"fld_94190649b7184770a65e568f00725716","modified":1652980488483,"created":1652980488483,"url":"https://aceleracaoeveris-com-br.umbler.net/dao/module/users/601b24ecfc862000168175f3","name":"https://aceleracaoeveris-com-br.umbler.net/dao/module/users/601b24ecfc862000168175f3","description":"","method":"DELETE","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1652980488483,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_94190649b7184770a65e568f00725716","parentId":"wrk_28bb6a848cd743b29d769af70b693f9f","modified":1652980492184,"created":1652980492184,"name":"Aceleracao Everis - Postman","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1652980492184,"_type":"request_group"},{"_id":"wrk_28bb6a848cd743b29d769af70b693f9f","parentId":null,"modified":1652980492198,"created":1652975634103,"name":"New Document","description":"","scope":"design","_type":"workspace"},{"_id":"req_27c2c8a9a2d44394b85f85728adb788b","parentId":"fld_94190649b7184770a65e568f00725716","modified":1653080597634,"created":1652980488486,"url":"https://aceleracaoeveris-com-br.umbler.net/dao/module/users/601b24ecfc862000168175f3","name":"https://aceleracaoeveris-com-br.umbler.net/dao/module/users/601b24ecfc862000168175f3","description":"","method":"PUT","body":{"mimeType":"","text":"{\n    \"username\" : \"Nome alterado\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_672cc96b27db4af3ac07cc35d7d55ccf"}],"authentication":{},"metaSortKey":-1652980488486,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_90804cfff4a74f53876f6c10aaf4af78","parentId":"fld_94190649b7184770a65e568f00725716","modified":1652980488488,"created":1652980488488,"url":"https://aceleracaoeveris-com-br.umbler.net/dao/module/users/601b24ecfc862000168175f3","name":"https://aceleracaoeveris-com-br.umbler.net/dao/module/users/601b24ecfc862000168175f3","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1652980488488,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_064ff237a3bb43e1ab7ec8722011ae2e","parentId":"fld_94190649b7184770a65e568f00725716","modified":1653080595148,"created":1652980488490,"url":"https://aceleracaoeveris-com-br.umbler.net/dao/module/users","name":"https://aceleracaoeveris-com-br.umbler.net/dao/module/users","description":"","method":"POST","body":{"mimeType":"","text":"{\n    \"username\" : \"Aceleração\",\n    \"nickname\" : \"Teste\"\n}"},"parameters":[],"headers":[{"name":"Content-Type","value":"application/json","id":"pair_c33daf0384fd48ae9b6a43c932d5d1c7"}],"authentication":{},"metaSortKey":-1652980488490,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_91ac96030ebc4cf0b68909df675f6cba","parentId":"fld_94190649b7184770a65e568f00725716","modified":1652980488491,"created":1652980488491,"url":"https://aceleracaoeveris-com-br.umbler.net/dao/module/users","name":"https://aceleracaoeveris-com-br.umbler.net/dao/module/users","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1652980488491,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_235e0ff1c6a94d999d973686540a02a2","parentId":"fld_3cefa426b5c3436185d68fcc09aab2bd","modified":1653079777568,"created":1653078940796,"url":"localhost:3000/login","name":"post","description":"","method":"POST","body":{"mimeType":"application/x-www-form-urlencoded","params":[{"id":"pair_6d58a95d57c14e28975fdcc2b6202a23","name":"username","value":"admin","description":""},{"id":"pair_49066d9923f64642bbaa261a8b738a46","name":"password","value":"123456","description":""}]},"parameters":[],"headers":[{"name":"Content-Type","value":"application/x-www-form-urlencoded","id":"pair_e55514bba658458e9b1ec9bbceb08863"}],"authentication":{},"metaSortKey":-1653078940796,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_3cefa426b5c3436185d68fcc09aab2bd","parentId":"fld_64ca9c25d0a24228a964f7ac9cb1ce3d","modified":1653078930742,"created":1653078930742,"name":"jwt","description":"","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1653078930742,"_type":"request_group"},{"_id":"fld_64ca9c25d0a24228a964f7ac9cb1ce3d","parentId":"wrk_28bb6a848cd743b29d769af70b693f9f","modified":1653080573899,"created":1653075641594,"name":"node","description":"API rest node","environment":{},"environmentPropertyOrder":{},"metaSortKey":-1653075641594,"_type":"request_group"},{"_id":"req_e9fe50abcf62424bb25f86a3e3493d3a","parentId":"fld_3cefa426b5c3436185d68fcc09aab2bd","modified":1653080198245,"created":1653079217249,"url":"localhost:3000/protected","name":"get","description":"","method":"GET","body":{},"parameters":[],"headers":[{"id":"pair_e905b5b9222142ae85202b37c3f56641","name":"Authorization","value":"Bearer eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJzdWIiOjEsIm5hbWUiOiJOb21lIFVzdcOhcmlvIiwicm9sZXMiOlsiYWRtaW4iXSwiaWF0IjoxNjUzMDc5OTM3LCJleHAiOjE2NTMwNzk5Njd9.2XljVuKsIQ_Qc98_YPPdXf6Gr5RFQSTjGQzivYFS3jdcRZh36_CccjQg2XuZ1_fBxIL9IK6lUOzaSfgxmT_hFyJmQ84g2_kLHGJGpZs1n9l287mYVFWYk42eOxwwEt9loOG8m-2IYwwWKicL8PCEeiIJ5bObJ-dr4_BW3nU-E42VcRjfSS43EZ7RTfVB4bSNxZTQdWHYE9IEBYnu-obCvAvoAnI_CPg5uWnM4TsGlcQPsYMtuhhoIwta8ZetoiklbnVokpDU2H3SJYXO7FprZVBfg9cH5El_MP4sx2UnE37LRQDUmRLY1iMuTYkOWcPth5DzIrEUfpz3pWcyqz8OUA","description":""}],"authentication":{},"metaSortKey":-1653029714643.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_913aa8f8c71d477ab25fef78c47d9567","parentId":"fld_aeba16f18550449db689cdac432023ba","modified":1653423639056,"created":1653422478445,"url":"localhost:3000/users","name":"get","description":"","method":"GET","body":{},"parameters":[],"headers":[],"authentication":{},"metaSortKey":-1653029714643.5,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"fld_aeba16f18550449db689cdac432023ba","parentId":"fld_64ca9c25d0a24228a964f7ac9cb1ce3d","modified":1653426246677,"created":1653422478438,"name":"api-com-express","description":"Exemplo de API em Node.js usando o framework Express.js","environment":{},"environmentPropertyOrder":null,"metaSortKey":-1653077286168,"_type":"request_group"},{"_id":"req_b7e8f08a23284011ac7c8b337cb8f232","parentId":"fld_aeba16f18550449db689cdac432023ba","modified":1653425663206,"created":1653423620869,"url":"localhost:3000/users","name":"post","description":"","method":"POST","body":{"mimeType":"application/x-www-form-urlencoded","params":[{"id":"pair_7fd8ec1f2b5040938af04690bffa4f1d","name":"name","value":"José","description":""},{"id":"pair_a1802c1090ec4a5fadd673e736b38453","name":"id","value":"2","description":""}]},"parameters":[],"headers":[{"name":"Content-Type","value":"application/x-www-form-urlencoded","id":"pair_6e03a96a777f4d2199795e3cbe2bf625"}],"authentication":{},"metaSortKey":-1653005101567.25,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_174a06119de5411aadf418863c91c782","parentId":"fld_aeba16f18550449db689cdac432023ba","modified":1653425789950,"created":1653425031750,"url":"localhost:3000/users/1","name":"atualizar","description":"","method":"PUT","body":{"mimeType":"application/x-www-form-urlencoded","params":[{"id":"pair_7fd8ec1f2b5040938af04690bffa4f1d","name":"name","value":"João Henrique","description":""},{"id":"pair_a1802c1090ec4a5fadd673e736b38453","name":"id","value":"1","description":""}]},"parameters":[],"headers":[{"name":"Content-Type","value":"application/x-www-form-urlencoded","id":"pair_6e03a96a777f4d2199795e3cbe2bf625"}],"authentication":{},"metaSortKey":-1652992795029.125,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"req_ebf106b74cbe4ac99401ca1a614daf53","parentId":"fld_aeba16f18550449db689cdac432023ba","modified":1653425826405,"created":1653425695318,"url":"localhost:3000/users/1","name":"deletar","description":"","method":"DELETE","body":{"mimeType":"application/x-www-form-urlencoded","params":[{"id":"pair_d589dc66e1fe4d45b129306bea39bdc7","name":"name","value":"","description":""},{"id":"pair_d1f179ab1af449b2b561a78fbd663e74","name":"id","value":"1","description":""}]},"parameters":[],"headers":[{"name":"Content-Type","value":"application/x-www-form-urlencoded","id":"pair_6e03a96a777f4d2199795e3cbe2bf625"}],"authentication":{},"metaSortKey":-1652986641760.0625,"isPrivate":false,"settingStoreCookies":true,"settingSendCookies":true,"settingDisableRenderRequestBody":false,"settingEncodeUrl":true,"settingRebuildPath":true,"settingFollowRedirects":"global","_type":"request"},{"_id":"env_b19a75fb46caa4633c2edab6e34ec5b56617eab5","parentId":"wrk_28bb6a848cd743b29d769af70b693f9f","modified":1652975634120,"created":1652975634120,"name":"Base Environment","data":{"base_url":"{{ scheme }}://{{ host }}{{ base_path }}"},"dataPropertyOrder":null,"color":null,"isPrivate":false,"metaSortKey":1652975634120,"_type":"environment"},{"_id":"jar_b19a75fb46caa4633c2edab6e34ec5b56617eab5","parentId":"wrk_28bb6a848cd743b29d769af70b693f9f","modified":1652975634125,"created":1652975634125,"name":"Default Jar","cookies":[],"_type":"cookie_jar"},{"_id":"spc_e7763c14d29a479f8bdb67d7e3166349","parentId":"wrk_28bb6a848cd743b29d769af70b693f9f","modified":1653080486038,"created":1652975634115,"fileName":"DIO","contents":"openapi: 3.0.0\ninfo:\n  description: \"This is a sample server Petstore server.  You can find out more about\n    Swagger at [http://swagger.io](http://swagger.io) or on [irc.freenode.net,\n    #swagger](http://swagger.io/irc/).  For this sample, you can use the api key\n    `special-key` to test the authorization filters.\"\n  version: 1.0.2\n  title: Swagger Petstore\n  termsOfService: http://swagger.io/terms/\n  contact:\n    email: apiteam@swagger.io\n  license:\n    name: Apache 2.0\n    url: http://www.apache.org/licenses/LICENSE-2.0.html\ntags:\n  - name: pet\n    description: Everything about your Pets\n    externalDocs:\n      description: Find out more\n      url: http://swagger.io\n  - name: store\n    description: Access to Petstore orders\n  - name: user\n    description: Operations about user\n    externalDocs:\n      description: Find out more about our store\n      url: http://swagger.io\npaths:\n  /pet:\n    post:\n      tags:\n        - pet\n      summary: Add a new pet to the store\n      description: \"\"\n      operationId: addPet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"405\":\n          description: Invalid input\n    put:\n      tags:\n        - pet\n      summary: Update an existing pet\n      description: \"\"\n      operationId: updatePet\n      requestBody:\n        $ref: \"#/components/requestBodies/Pet\"\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n        \"405\":\n          description: Validation exception\n  /pet/findByStatus:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by status\n      description: Multiple status values can be provided with comma separated strings\n      operationId: findPetsByStatus\n      parameters:\n        - name: status\n          in: query\n          description: Status values that need to be considered for filter\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n              enum:\n                - available\n                - pending\n                - sold\n              default: available\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid status value\n  /pet/findByTags:\n    get:\n      tags:\n        - pet\n      summary: Finds Pets by tags\n      description: Multiple tags can be provided with comma separated strings. Use tag1,\n        tag2, tag3 for testing.\n      operationId: findPetsByTags\n      parameters:\n        - name: tags\n          in: query\n          description: Tags to filter by\n          required: true\n          explode: true\n          schema:\n            type: array\n            items:\n              type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                type: array\n                items:\n                  $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid tag value\n      deprecated: true\n  \"/pet/{petId}\":\n    get:\n      tags:\n        - pet\n      summary: Find pet by ID\n      description: Returns a single pet\n      operationId: getPetById\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet to return\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Pet\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n    post:\n      tags:\n        - pet\n      summary: Updates a pet in the store with form data\n      description: \"\"\n      operationId: updatePetWithForm\n      parameters:\n        - name: petId\n          in: path\n          description: ID of pet that needs to be updated\n          required: true\n          schema:\n            type: integer\n            format: int64\n      requestBody:\n        content:\n          application/x-www-form-urlencoded:\n            schema:\n              type: object\n              properties:\n                name:\n                  description: Updated name of the pet\n                  type: string\n                status:\n                  description: Updated status of the pet\n                  type: string\n      responses:\n        \"405\":\n          description: Invalid input\n    delete:\n      tags:\n        - pet\n      summary: Deletes a pet\n      description: \"\"\n      operationId: deletePet\n      parameters:\n        - name: api_key\n          in: header\n          required: false\n          schema:\n            type: string\n        - name: petId\n          in: path\n          description: Pet id to delete\n          required: true\n          schema:\n            type: integer\n            format: int64\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Pet not found\n  /store/inventory:\n    get:\n      tags:\n        - store\n      summary: Returns pet inventories by status\n      description: Returns a map of status codes to quantities\n      operationId: getInventory\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/json:\n              schema:\n                type: object\n                additionalProperties:\n                  type: integer\n                  format: int32\n  /store/order:\n    post:\n      tags:\n        - store\n      summary: Place an order for a pet\n      description: \"\"\n      operationId: placeOrder\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/Order\"\n        description: order placed for purchasing the pet\n        required: true\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid Order\n  \"/store/order/{orderId}\":\n    get:\n      tags:\n        - store\n      summary: Find purchase order by ID\n      description: For valid response try integer IDs with value >= 1 and <= 10. Other\n        values will generated exceptions\n      operationId: getOrderById\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of pet that needs to be fetched\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n            maximum: 10\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/Order\"\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n    delete:\n      tags:\n        - store\n      summary: Delete purchase order by ID\n      description: For valid response try integer IDs with positive integer value. Negative\n        or non-integer values will generate API errors\n      operationId: deleteOrder\n      parameters:\n        - name: orderId\n          in: path\n          description: ID of the order that needs to be deleted\n          required: true\n          schema:\n            type: integer\n            format: int64\n            minimum: 1\n      responses:\n        \"400\":\n          description: Invalid ID supplied\n        \"404\":\n          description: Order not found\n  /user:\n    post:\n      tags:\n        - user\n      summary: Create user\n      description: This can only be done by the logged in user.\n      operationId: createUser\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Created user object\n        required: true\n      responses:\n        default:\n          description: successful operation\n  /user/createWithArray:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithArrayInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/createWithList:\n    post:\n      tags:\n        - user\n      summary: Creates list of users with given input array\n      description: \"\"\n      operationId: createUsersWithListInput\n      requestBody:\n        $ref: \"#/components/requestBodies/UserArray\"\n      responses:\n        default:\n          description: successful operation\n  /user/login:\n    get:\n      tags:\n        - user\n      summary: Logs user into the system\n      description: \"\"\n      operationId: loginUser\n      parameters:\n        - name: username\n          in: query\n          description: The user name for login\n          required: true\n          schema:\n            type: string\n        - name: password\n          in: query\n          description: The password for login in clear text\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          headers:\n            X-Rate-Limit:\n              description: calls per hour allowed by the user\n              schema:\n                type: integer\n                format: int32\n            X-Expires-After:\n              description: date in UTC when token expires\n              schema:\n                type: string\n                format: date-time\n          content:\n            application/xml:\n              schema:\n                type: string\n            application/json:\n              schema:\n                type: string\n        \"400\":\n          description: Invalid username/password supplied\n  /user/logout:\n    get:\n      tags:\n        - user\n      summary: Logs out current logged in user session\n      description: \"\"\n      operationId: logoutUser\n      responses:\n        default:\n          description: successful operation\n  \"/user/{username}\":\n    get:\n      tags:\n        - user\n      summary: Get user by user name\n      description: \"\"\n      operationId: getUserByName\n      parameters:\n        - name: username\n          in: path\n          description: \"The name that needs to be fetched. Use user1 for testing. \"\n          required: true\n          schema:\n            type: string\n      responses:\n        \"200\":\n          description: successful operation\n          content:\n            application/xml:\n              schema:\n                $ref: \"#/components/schemas/User\"\n            application/json:\n              schema:\n                $ref: \"#/components/schemas/User\"\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\n    put:\n      tags:\n        - user\n      summary: Updated user\n      description: This can only be done by the logged in user.\n      operationId: updateUser\n      parameters:\n        - name: username\n          in: path\n          description: name that need to be updated\n          required: true\n          schema:\n            type: string\n      requestBody:\n        content:\n          application/json:\n            schema:\n              $ref: \"#/components/schemas/User\"\n        description: Updated user object\n        required: true\n      responses:\n        \"400\":\n          description: Invalid user supplied\n        \"404\":\n          description: User not found\n    delete:\n      tags:\n        - user\n      summary: Delete user\n      description: This can only be done by the logged in user.\n      operationId: deleteUser\n      parameters:\n        - name: username\n          in: path\n          description: The name that needs to be deleted\n          required: true\n          schema:\n            type: string\n      responses:\n        \"400\":\n          description: Invalid username supplied\n        \"404\":\n          description: User not found\nexternalDocs:\n  description: Find out more about Swagger\n  url: http://swagger.io\nservers:\n  - url: https://petstore.swagger.io/v2\ncomponents:\n  requestBodies:\n    UserArray:\n      content:\n        application/json:\n          schema:\n            type: array\n            items:\n              $ref: \"#/components/schemas/User\"\n      description: List of user object\n      required: true\n    Pet:\n      content:\n        application/json:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n        application/xml:\n          schema:\n            $ref: \"#/components/schemas/Pet\"\n      description: Pet object that needs to be added to the store\n      required: true\n  schemas:\n    Order:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        petId:\n          type: integer\n          format: int64\n        quantity:\n          type: integer\n          format: int32\n        shipDate:\n          type: string\n          format: date-time\n        status:\n          type: string\n          description: Order Status\n          enum:\n            - placed\n            - approved\n            - delivered\n        complete:\n          type: boolean\n          default: false\n      xml:\n        name: Order\n    User:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        username:\n          type: string\n        firstName:\n          type: string\n        lastName:\n          type: string\n        email:\n          type: string\n        password:\n          type: string\n        phone:\n          type: string\n        userStatus:\n          type: integer\n          format: int32\n          description: User Status\n      xml:\n        name: User\n    Category:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Category\n    Tag:\n      type: object\n      properties:\n        id:\n          type: integer\n          format: int64\n        name:\n          type: string\n      xml:\n        name: Tag\n    Pet:\n      type: object\n      required:\n        - name\n        - photoUrls\n      properties:\n        id:\n          type: integer\n          format: int64\n        category:\n          $ref: \"#/components/schemas/Category\"\n        name:\n          type: string\n          example: doggie\n        photoUrls:\n          type: array\n          xml:\n            name: photoUrl\n            wrapped: true\n          items:\n            type: string\n        tags:\n          type: array\n          xml:\n            name: tag\n            wrapped: true\n          items:\n            $ref: \"#/components/schemas/Tag\"\n        status:\n          type: string\n          description: pet status in the store\n          enum:\n            - available\n            - pending\n            - sold\n      xml:\n        name: Pet\n    ApiResponse:\n      type: object\n      properties:\n        code:\n          type: integer\n          format: int32\n        type:\n          type: string\n        message:\n          type: string","contentType":"yaml","_type":"api_spec"},{"_id":"uts_a43b3d24e8c348c998e34251491576a0","parentId":"wrk_28bb6a848cd743b29d769af70b693f9f","modified":1652975634130,"created":1652975634130,"name":"Example Test Suite","_type":"unit_test_suite"},{"_id":"env_env_b19a75fb46caa4633c2edab6e34ec5b56617eab5_sub","parentId":"env_b19a75fb46caa4633c2edab6e34ec5b56617eab5","modified":1653080532599,"created":1653080390678,"name":"OpenAPI env","data":{"scheme":"https","base_path":"/v2","host":"petstore.swagger.io"},"dataPropertyOrder":{"&":["scheme","base_path","host"]},"color":null,"isPrivate":false,"metaSortKey":1653080390678,"_type":"environment"}]}